# Copyright 1999-2020 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="Manage symlinks from GHC installations"
MAINTAINER="ag.eitilt@gmail.com"
VERSION="1.0.0"

# sort function for ghc versions, to be used in a pipe
sort_ghc_versions() {
	local vsort="sort --version-sort"
	# Test if our sort supports the --version-sort option
	${vsort} </dev/null &>/dev/null || vsort=sort
	LC_ALL=C ${vsort}
}

# find a list of ghc symlink targets
find_targets() {
	local f
	for f in "${EROOT}"/usr/bin/ghc-[[:digit:]]* ; do
		if [[  -f "${f}" && -x "${f}" ]] ; then
			basename "${f}"
		fi
	done | sort_ghc_versions
}

# remove the existing symlinks
remove_symlinks() {
	rm -f "${EROOT}"/usr/bin/{ghc,ghc-pkg,ghci,runghc,runhaskell} &>/dev/null
}

# set the ghc symlinks
set_symlinks() {
	local target="${1}" targets

	if is_number "${target}"; then
		local targets=( $(find_targets) )
		[[ ${target} -ge 1 && ${target} -le ${#targets[@]} ]] \
			|| die -q "Number out of range: $1"
		target=${targets[target-1]}
	fi

	if [[ -n ${target} ]]; then
		if [[ -f ${EROOT}/usr/bin/${target} && -x ${EROOT}/usr/bin/${target} ]]; then
			target=${target#ghc-}
		else					# target not valid
			target=
		fi
	fi
	[[ -n ${target} ]] || die -q "Target \"$1\" doesn't appear to be valid!"

	remove_symlinks || die -q "Couldn't remove existing symlinks"

	ln -s "${EROOT}/usr/bin/ghc-${target}" "${EROOT}/usr/bin/ghc" \
		|| die "Couldn't set ghc-${target} /usr/bin/ghc symlink"
	ln -s "${EROOT}/usr/bin/ghc-pkg-${target}" "${EROOT}/usr/bin/ghc-pkg" \
		|| die "Couldn't set ghc-${target} /usr/bin/ghc-pkg symlink"
	ln -s "${EROOT}/usr/bin/ghci-${target}" "${EROOT}/usr/bin/ghci" \
		|| die "Couldn't set ghc-${target} /usr/bin/ghci symlink"
	ln -s "${EROOT}/usr/bin/runghc-${target}" "${EROOT}/usr/bin/runghc" \
		|| die "Couldn't set ghc-${target} /usr/bin/runghc symlink"
	ln -s "${EROOT}/usr/bin/runghc-${target}" "${EROOT}/usr/bin/runhaskell" \
		|| die "Couldn't set ghc-${target} /usr/bin/runhaskell symlink"
}

### show action ###

describe_show() {
	echo "Show the current GHC version"
}

do_show() {
	[[ -z "${@}" ]] || die -q "Too many parameters"

	write_list_start "Current GHC version:"
	if [[ -L ${EROOT}/usr/bin/ghc ]]; then
		write_kv_list_entry "$(basename $(canonicalise ${EROOT}/usr/bin/ghc ) )" ""
	elif [[ -e "${EROOT}/usr/bin/ghc" ]] ; then
		write_kv_list_entry "(not a symlink)" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available GHC versions"
}

do_list() {
	[[ -z ${@} ]] || die -q "Too many parameters"

	local i targets=( $(find_targets) )

	write_list_start "Available GHC versions:"
	for (( i = 0; i < ${#targets[@]}; i++ )); do
		[[ ${targets[i]} = \
			$(basename "$(canonicalise "${EROOT}/usr/bin/ghc")") ]] \
			&& targets[i]=$(highlight_marker "${targets[i]}")
	done
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
	echo "Set a new default GHC version"
}

describe_set_parameters() {
	echo "<target>"
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

do_set() {
	[[ -z $1 ]] && die -q "You didn't tell me what to set the symlink to"
	[[ $# -gt 1 ]] && die -q "Too many parameters"

	if [[ -e ${EROOT}/usr/bin/ghc && ! -L ${EROOT}/usr/bin/ghc ]]; then
		die -q "${EROOT}/usr/bin/ghc exists but is not a symlink"
	fi

	set_symlinks "$1" || die -q "Couldn't set a new version"
}

# vim: ts=4 sw=4 noet
